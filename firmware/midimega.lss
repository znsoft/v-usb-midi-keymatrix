
midimega.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b12  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  00000b12  00000ba6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003a  00800072  00800072  00000bb8  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  00000bb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000242  00000000  00000000  00000bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000107a  00000000  00000000  00000e3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005e7  00000000  00000000  00001eb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009e0  00000000  00000000  0000249b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e0  00000000  00000000  00002e7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000052e  00000000  00000000  00002f5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005d5  00000000  00000000  0000348a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c8  00000000  00000000  00003a5f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	75 c0       	rjmp	.+234    	; 0xec <__ctors_end>
   2:	a9 c0       	rjmp	.+338    	; 0x156 <__vector_1>
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	8d c0       	rjmp	.+282    	; 0x122 <__bad_interrupt>
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	8b c0       	rjmp	.+278    	; 0x122 <__bad_interrupt>
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	89 c0       	rjmp	.+274    	; 0x122 <__bad_interrupt>
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	87 c0       	rjmp	.+270    	; 0x122 <__bad_interrupt>
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	85 c0       	rjmp	.+266    	; 0x122 <__bad_interrupt>
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	83 c0       	rjmp	.+262    	; 0x122 <__bad_interrupt>
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	81 c0       	rjmp	.+258    	; 0x122 <__bad_interrupt>
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	7f c0       	rjmp	.+254    	; 0x122 <__bad_interrupt>
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>

00000026 <usbDescriptorString0>:
  26:	04 03 09 04                                         ....

0000002a <usbDescriptorStringVendor>:
  2a:	22 03 77 00 77 00 77 00 2e 00 63 00 72 00 79 00     ".w.w.w...c.r.y.
  3a:	70 00 74 00 6f 00 6d 00 79 00 73 00 2e 00 64 00     p.t.o.m.y.s...d.
  4a:	65 00                                               e.

0000004c <usbDescriptorStringDevice>:
  4c:	16 03 56 00 2d 00 55 00 53 00 42 00 2d 00 4d 00     ..V.-.U.S.B.-.M.
  5c:	49 00 44 00 49 00                                   I.D.I.

00000062 <modmask>:
  62:	01 02 04 08 10 20                                   ..... 

00000068 <extrows>:
  68:	01 02                                               ..

0000006a <columns>:
  6a:	01 02 10 20 40                                      ... @

0000006f <adcChannels>:
  6f:	02 03 04 05 07                                      .....

00000074 <deviceDescrMIDI>:
  74:	12 01 10 01 00 00 00 08 c0 16 e4 05 01 00 01 02     ................
  84:	00 01                                               ..

00000086 <configDescrMIDI>:
  86:	09 02 65 00 02 01 00 80 32 09 04 00 00 00 01 01     ..e.....2.......
  96:	00 00 09 24 01 00 01 09 00 01 01 09 04 01 00 02     ...$............
  a6:	01 03 00 00 07 24 01 00 01 41 00 06 24 02 01 01     .....$...A..$...
  b6:	00 06 24 02 02 02 00 09 24 03 01 03 01 02 01 00     ..$.....$.......
  c6:	09 24 03 02 04 01 01 01 00 09 05 01 03 08 00 0a     .$..............
  d6:	00 00 05 25 01 01 01 09 05 81 03 08 00 0a 00 00     ...%............
  e6:	05 25 01 01 03 00                                   .%....

000000ec <__ctors_end>:
  ec:	11 24       	eor	r1, r1
  ee:	1f be       	out	0x3f, r1	; 63
  f0:	cf e5       	ldi	r28, 0x5F	; 95
  f2:	d4 e0       	ldi	r29, 0x04	; 4
  f4:	de bf       	out	0x3e, r29	; 62
  f6:	cd bf       	out	0x3d, r28	; 61

000000f8 <__do_copy_data>:
  f8:	10 e0       	ldi	r17, 0x00	; 0
  fa:	a0 e6       	ldi	r26, 0x60	; 96
  fc:	b0 e0       	ldi	r27, 0x00	; 0
  fe:	e2 e1       	ldi	r30, 0x12	; 18
 100:	fb e0       	ldi	r31, 0x0B	; 11
 102:	02 c0       	rjmp	.+4      	; 0x108 <.do_copy_data_start>

00000104 <.do_copy_data_loop>:
 104:	05 90       	lpm	r0, Z+
 106:	0d 92       	st	X+, r0

00000108 <.do_copy_data_start>:
 108:	a2 37       	cpi	r26, 0x72	; 114
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <.do_copy_data_loop>

0000010e <__do_clear_bss>:
 10e:	10 e0       	ldi	r17, 0x00	; 0
 110:	a2 e7       	ldi	r26, 0x72	; 114
 112:	b0 e0       	ldi	r27, 0x00	; 0
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ac 3a       	cpi	r26, 0xAC	; 172
 11a:	b1 07       	cpc	r27, r17
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	77 d3       	rcall	.+1774   	; 0x80e <main>
 120:	f6 c4       	rjmp	.+2540   	; 0xb0e <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <usbCrc16>:
 124:	a8 2f       	mov	r26, r24
 126:	b9 2f       	mov	r27, r25
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	41 e0       	ldi	r20, 0x01	; 1
 12e:	50 ea       	ldi	r21, 0xA0	; 160
 130:	60 95       	com	r22

00000132 <crcByteLoop>:
 132:	6f 5f       	subi	r22, 0xFF	; 255
 134:	58 f4       	brcc	.+22     	; 0x14c <crcReady>
 136:	2d 91       	ld	r18, X+
 138:	38 ef       	ldi	r19, 0xF8	; 248
 13a:	82 27       	eor	r24, r18

0000013c <crcBitLoop>:
 13c:	97 95       	ror	r25
 13e:	87 95       	ror	r24
 140:	10 f0       	brcs	.+4      	; 0x146 <crcNoXor>
 142:	84 27       	eor	r24, r20
 144:	95 27       	eor	r25, r21

00000146 <crcNoXor>:
 146:	3f 5f       	subi	r19, 0xFF	; 255
 148:	c8 f3       	brcs	.-14     	; 0x13c <crcBitLoop>
 14a:	f3 cf       	rjmp	.-26     	; 0x132 <crcByteLoop>

0000014c <crcReady>:
 14c:	08 95       	ret

0000014e <usbCrc16Append>:
 14e:	ea df       	rcall	.-44     	; 0x124 <usbCrc16>
 150:	8d 93       	st	X+, r24
 152:	9d 93       	st	X+, r25
 154:	08 95       	ret

00000156 <__vector_1>:
 156:	cf 93       	push	r28
 158:	cf b7       	in	r28, 0x3f	; 63
 15a:	cf 93       	push	r28

0000015c <waitForJ>:
 15c:	c3 95       	inc	r28
 15e:	83 9b       	sbis	0x10, 3	; 16
 160:	e9 f7       	brne	.-6      	; 0x15c <waitForJ>

00000162 <waitForK>:
 162:	83 9b       	sbis	0x10, 3	; 16
 164:	09 c0       	rjmp	.+18     	; 0x178 <foundK>
 166:	83 9b       	sbis	0x10, 3	; 16
 168:	07 c0       	rjmp	.+14     	; 0x178 <foundK>
 16a:	83 9b       	sbis	0x10, 3	; 16
 16c:	05 c0       	rjmp	.+10     	; 0x178 <foundK>
 16e:	83 9b       	sbis	0x10, 3	; 16
 170:	03 c0       	rjmp	.+6      	; 0x178 <foundK>
 172:	83 9b       	sbis	0x10, 3	; 16
 174:	01 c0       	rjmp	.+2      	; 0x178 <foundK>
 176:	a6 c0       	rjmp	.+332    	; 0x2c4 <sofError>

00000178 <foundK>:
 178:	df 93       	push	r29
 17a:	c0 91 8f 00 	lds	r28, 0x008F
 17e:	dd 27       	eor	r29, r29
 180:	ca 56       	subi	r28, 0x6A	; 106
 182:	df 4f       	sbci	r29, 0xFF	; 255
 184:	83 9b       	sbis	0x10, 3	; 16
 186:	02 c0       	rjmp	.+4      	; 0x18c <haveTwoBitsK>
 188:	df 91       	pop	r29
 18a:	eb cf       	rjmp	.-42     	; 0x162 <waitForK>

0000018c <haveTwoBitsK>:
 18c:	2f 93       	push	r18
 18e:	0f 93       	push	r16
 190:	1f 93       	push	r17
 192:	00 b3       	in	r16, 0x10	; 16
 194:	2f ef       	ldi	r18, 0xFF	; 255
 196:	03 fb       	bst	r16, 3
 198:	20 f9       	bld	r18, 0
 19a:	4f 93       	push	r20
 19c:	3f 93       	push	r19
 19e:	10 b3       	in	r17, 0x10	; 16
 1a0:	4f ef       	ldi	r20, 0xFF	; 255
 1a2:	01 27       	eor	r16, r17
 1a4:	03 fb       	bst	r16, 3
 1a6:	21 f9       	bld	r18, 1
 1a8:	3b e0       	ldi	r19, 0x0B	; 11
 1aa:	31 c0       	rjmp	.+98     	; 0x20e <rxbit2>

000001ac <unstuff0>:
 1ac:	4e 7f       	andi	r20, 0xFE	; 254
 1ae:	01 2f       	mov	r16, r17
 1b0:	10 b3       	in	r17, 0x10	; 16
 1b2:	21 60       	ori	r18, 0x01	; 1
 1b4:	28 c0       	rjmp	.+80     	; 0x206 <didUnstuff0>

000001b6 <unstuff1>:
 1b6:	10 2f       	mov	r17, r16
 1b8:	4d 7f       	andi	r20, 0xFD	; 253
 1ba:	22 60       	ori	r18, 0x02	; 2
 1bc:	00 00       	nop
 1be:	00 b3       	in	r16, 0x10	; 16
 1c0:	29 c0       	rjmp	.+82     	; 0x214 <didUnstuff1>

000001c2 <unstuff2>:
 1c2:	4b 7f       	andi	r20, 0xFB	; 251
 1c4:	24 60       	ori	r18, 0x04	; 4
 1c6:	01 2f       	mov	r16, r17
 1c8:	00 00       	nop
 1ca:	10 b3       	in	r17, 0x10	; 16
 1cc:	2b c0       	rjmp	.+86     	; 0x224 <didUnstuff2>

000001ce <unstuff3>:
 1ce:	10 b3       	in	r17, 0x10	; 16
 1d0:	47 7f       	andi	r20, 0xF7	; 247
 1d2:	28 60       	ori	r18, 0x08	; 8
 1d4:	2a c0       	rjmp	.+84     	; 0x22a <didUnstuff3>

000001d6 <unstuff4>:
 1d6:	4f 7e       	andi	r20, 0xEF	; 239
 1d8:	00 b3       	in	r16, 0x10	; 16
 1da:	20 61       	ori	r18, 0x10	; 16
 1dc:	2c c0       	rjmp	.+88     	; 0x236 <didUnstuff4>

000001de <unstuff5>:
 1de:	4f 7d       	andi	r20, 0xDF	; 223
 1e0:	10 b3       	in	r17, 0x10	; 16
 1e2:	20 62       	ori	r18, 0x20	; 32
 1e4:	2f c0       	rjmp	.+94     	; 0x244 <didUnstuff5>

000001e6 <unstuff6>:
 1e6:	4f 7b       	andi	r20, 0xBF	; 191
 1e8:	00 b3       	in	r16, 0x10	; 16
 1ea:	20 64       	ori	r18, 0x40	; 64
 1ec:	32 c0       	rjmp	.+100    	; 0x252 <didUnstuff6>

000001ee <rxLoop>:
 1ee:	42 27       	eor	r20, r18
 1f0:	00 b3       	in	r16, 0x10	; 16
 1f2:	49 93       	st	Y+, r20
 1f4:	4f ef       	ldi	r20, 0xFF	; 255
 1f6:	00 00       	nop
 1f8:	10 27       	eor	r17, r16
 1fa:	13 fb       	bst	r17, 3
 1fc:	20 f9       	bld	r18, 0
 1fe:	10 b3       	in	r17, 0x10	; 16
 200:	1c 70       	andi	r17, 0x0C	; 12
 202:	c9 f1       	breq	.+114    	; 0x276 <se0>
 204:	29 7f       	andi	r18, 0xF9	; 249

00000206 <didUnstuff0>:
 206:	91 f2       	breq	.-92     	; 0x1ac <unstuff0>
 208:	01 27       	eor	r16, r17
 20a:	03 fb       	bst	r16, 3
 20c:	21 f9       	bld	r18, 1

0000020e <rxbit2>:
 20e:	00 b3       	in	r16, 0x10	; 16
 210:	23 7f       	andi	r18, 0xF3	; 243
 212:	89 f2       	breq	.-94     	; 0x1b6 <unstuff1>

00000214 <didUnstuff1>:
 214:	31 50       	subi	r19, 0x01	; 1
 216:	58 f1       	brcs	.+86     	; 0x26e <overflow>
 218:	10 27       	eor	r17, r16
 21a:	13 fb       	bst	r17, 3
 21c:	22 f9       	bld	r18, 2
 21e:	10 b3       	in	r17, 0x10	; 16
 220:	27 7e       	andi	r18, 0xE7	; 231
 222:	79 f2       	breq	.-98     	; 0x1c2 <unstuff2>

00000224 <didUnstuff2>:
 224:	01 27       	eor	r16, r17
 226:	03 fb       	bst	r16, 3
 228:	23 f9       	bld	r18, 3

0000022a <didUnstuff3>:
 22a:	2f 7c       	andi	r18, 0xCF	; 207
 22c:	81 f2       	breq	.-96     	; 0x1ce <unstuff3>
 22e:	00 b3       	in	r16, 0x10	; 16
 230:	10 27       	eor	r17, r16
 232:	13 fb       	bst	r17, 3
 234:	24 f9       	bld	r18, 4

00000236 <didUnstuff4>:
 236:	2f 79       	andi	r18, 0x9F	; 159
 238:	71 f2       	breq	.-100    	; 0x1d6 <unstuff4>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <didUnstuff4+0x6>
 23c:	10 b3       	in	r17, 0x10	; 16
 23e:	01 27       	eor	r16, r17
 240:	03 fb       	bst	r16, 3
 242:	25 f9       	bld	r18, 5

00000244 <didUnstuff5>:
 244:	2f 73       	andi	r18, 0x3F	; 63
 246:	59 f2       	breq	.-106    	; 0x1de <unstuff5>
 248:	00 c0       	rjmp	.+0      	; 0x24a <didUnstuff5+0x6>
 24a:	00 b3       	in	r16, 0x10	; 16
 24c:	10 27       	eor	r17, r16
 24e:	13 fb       	bst	r17, 3
 250:	26 f9       	bld	r18, 6

00000252 <didUnstuff6>:
 252:	22 30       	cpi	r18, 0x02	; 2
 254:	40 f2       	brcs	.-112    	; 0x1e6 <unstuff6>
 256:	00 c0       	rjmp	.+0      	; 0x258 <didUnstuff6+0x6>
 258:	10 b3       	in	r17, 0x10	; 16
 25a:	01 27       	eor	r16, r17
 25c:	03 fb       	bst	r16, 3
 25e:	27 f9       	bld	r18, 7

00000260 <didUnstuff7>:
 260:	24 30       	cpi	r18, 0x04	; 4
 262:	28 f6       	brcc	.-118    	; 0x1ee <rxLoop>

00000264 <unstuff7>:
 264:	4f 77       	andi	r20, 0x7F	; 127
 266:	20 68       	ori	r18, 0x80	; 128
 268:	10 b3       	in	r17, 0x10	; 16
 26a:	00 00       	nop
 26c:	f9 cf       	rjmp	.-14     	; 0x260 <didUnstuff7>

0000026e <overflow>:
 26e:	10 e4       	ldi	r17, 0x40	; 64
 270:	1a bf       	out	0x3a, r17	; 58

00000272 <ignorePacket>:
 272:	00 27       	eor	r16, r16
 274:	1c c0       	rjmp	.+56     	; 0x2ae <storeTokenAndReturn>

00000276 <se0>:
 276:	3b 50       	subi	r19, 0x0B	; 11
 278:	31 95       	neg	r19
 27a:	c3 1b       	sub	r28, r19
 27c:	d0 40       	sbci	r29, 0x00	; 0
 27e:	10 e4       	ldi	r17, 0x40	; 64
 280:	1a bf       	out	0x3a, r17	; 58
 282:	08 81       	ld	r16, Y
 284:	03 3c       	cpi	r16, 0xC3	; 195
 286:	11 f1       	breq	.+68     	; 0x2cc <handleData>
 288:	0b 34       	cpi	r16, 0x4B	; 75
 28a:	01 f1       	breq	.+64     	; 0x2cc <handleData>
 28c:	20 91 8d 00 	lds	r18, 0x008D
 290:	19 81       	ldd	r17, Y+1	; 0x01
 292:	11 0f       	add	r17, r17
 294:	12 13       	cpse	r17, r18
 296:	ed cf       	rjmp	.-38     	; 0x272 <ignorePacket>
 298:	4a 81       	ldd	r20, Y+2	; 0x02
 29a:	44 1f       	adc	r20, r20
 29c:	09 36       	cpi	r16, 0x69	; 105
 29e:	59 f1       	breq	.+86     	; 0x2f6 <handleIn>
 2a0:	0d 32       	cpi	r16, 0x2D	; 45
 2a2:	11 f0       	breq	.+4      	; 0x2a8 <handleSetupOrOut>
 2a4:	01 3e       	cpi	r16, 0xE1	; 225
 2a6:	29 f7       	brne	.-54     	; 0x272 <ignorePacket>

000002a8 <handleSetupOrOut>:
 2a8:	4f 70       	andi	r20, 0x0F	; 15
 2aa:	09 f0       	breq	.+2      	; 0x2ae <storeTokenAndReturn>
 2ac:	04 2f       	mov	r16, r20

000002ae <storeTokenAndReturn>:
 2ae:	00 93 94 00 	sts	0x0094, r16

000002b2 <doReturn>:
 2b2:	3f 91       	pop	r19
 2b4:	4f 91       	pop	r20
 2b6:	1f 91       	pop	r17
 2b8:	0f 91       	pop	r16
 2ba:	2f 91       	pop	r18
 2bc:	df 91       	pop	r29
 2be:	ca b7       	in	r28, 0x3a	; 58
 2c0:	c6 fd       	sbrc	r28, 6
 2c2:	4c cf       	rjmp	.-360    	; 0x15c <waitForJ>

000002c4 <sofError>:
 2c4:	cf 91       	pop	r28
 2c6:	cf bf       	out	0x3f, r28	; 63
 2c8:	cf 91       	pop	r28
 2ca:	18 95       	reti

000002cc <handleData>:
 2cc:	20 91 94 00 	lds	r18, 0x0094
 2d0:	22 23       	and	r18, r18
 2d2:	79 f3       	breq	.-34     	; 0x2b2 <doReturn>
 2d4:	10 91 92 00 	lds	r17, 0x0092
 2d8:	11 23       	and	r17, r17
 2da:	69 f5       	brne	.+90     	; 0x336 <sendNakAndReti>
 2dc:	34 30       	cpi	r19, 0x04	; 4
 2de:	6a f1       	brmi	.+90     	; 0x33a <sendAckAndReti>
 2e0:	30 93 92 00 	sts	0x0092, r19
 2e4:	20 93 8e 00 	sts	0x008E, r18
 2e8:	10 91 8f 00 	lds	r17, 0x008F
 2ec:	3b e0       	ldi	r19, 0x0B	; 11
 2ee:	31 1b       	sub	r19, r17
 2f0:	30 93 8f 00 	sts	0x008F, r19
 2f4:	22 c0       	rjmp	.+68     	; 0x33a <sendAckAndReti>

000002f6 <handleIn>:
 2f6:	00 91 92 00 	lds	r16, 0x0092
 2fa:	01 30       	cpi	r16, 0x01	; 1
 2fc:	e4 f4       	brge	.+56     	; 0x336 <sendNakAndReti>
 2fe:	0a e5       	ldi	r16, 0x5A	; 90
 300:	4f 70       	andi	r20, 0x0F	; 15
 302:	49 f4       	brne	.+18     	; 0x316 <handleIn1>
 304:	30 91 60 00 	lds	r19, 0x0060
 308:	34 fd       	sbrc	r19, 4
 30a:	19 c0       	rjmp	.+50     	; 0x33e <sendCntAndReti>
 30c:	00 93 60 00 	sts	0x0060, r16
 310:	c6 e7       	ldi	r28, 0x76	; 118
 312:	d0 e0       	ldi	r29, 0x00	; 0
 314:	18 c0       	rjmp	.+48     	; 0x346 <usbSendAndReti>

00000316 <handleIn1>:
 316:	30 91 81 00 	lds	r19, 0x0081
 31a:	34 fd       	sbrc	r19, 4
 31c:	10 c0       	rjmp	.+32     	; 0x33e <sendCntAndReti>
 31e:	00 93 81 00 	sts	0x0081, r16
 322:	c2 e8       	ldi	r28, 0x82	; 130
 324:	d0 e0       	ldi	r29, 0x00	; 0
 326:	0f c0       	rjmp	.+30     	; 0x346 <usbSendAndReti>

00000328 <stuffN1Delay>:
 328:	27 95       	ror	r18
 32a:	a8 f4       	brcc	.+42     	; 0x356 <doExorN1>
 32c:	51 50       	subi	r21, 0x01	; 1
 32e:	a9 f4       	brne	.+42     	; 0x35a <commonN1>
 330:	22 0f       	add	r18, r18
 332:	00 00       	nop
 334:	f9 cf       	rjmp	.-14     	; 0x328 <stuffN1Delay>

00000336 <sendNakAndReti>:
 336:	4a e5       	ldi	r20, 0x5A	; 90
 338:	03 c0       	rjmp	.+6      	; 0x340 <usbSendX3>

0000033a <sendAckAndReti>:
 33a:	42 ed       	ldi	r20, 0xD2	; 210
 33c:	01 c0       	rjmp	.+2      	; 0x340 <usbSendX3>

0000033e <sendCntAndReti>:
 33e:	43 2f       	mov	r20, r19

00000340 <usbSendX3>:
 340:	c4 e1       	ldi	r28, 0x14	; 20
 342:	d0 e0       	ldi	r29, 0x00	; 0
 344:	32 e0       	ldi	r19, 0x02	; 2

00000346 <usbSendAndReti>:
 346:	11 b3       	in	r17, 0x11	; 17
 348:	1c 60       	ori	r17, 0x0C	; 12
 34a:	93 9a       	sbi	0x12, 3	; 18
 34c:	11 bb       	out	0x11, r17	; 17
 34e:	02 b3       	in	r16, 0x12	; 18
 350:	20 e4       	ldi	r18, 0x40	; 64
 352:	1c e0       	ldi	r17, 0x0C	; 12
 354:	5f 93       	push	r21

00000356 <doExorN1>:
 356:	01 27       	eor	r16, r17
 358:	56 e0       	ldi	r21, 0x06	; 6

0000035a <commonN1>:
 35a:	02 bb       	out	0x12, r16	; 18
 35c:	27 95       	ror	r18
 35e:	20 f4       	brcc	.+8      	; 0x368 <doExorN2>
 360:	51 50       	subi	r21, 0x01	; 1
 362:	21 f4       	brne	.+8      	; 0x36c <commonN2>
 364:	22 0f       	add	r18, r18
 366:	f9 cf       	rjmp	.-14     	; 0x35a <commonN1>

00000368 <doExorN2>:
 368:	01 27       	eor	r16, r17
 36a:	56 e0       	ldi	r21, 0x06	; 6

0000036c <commonN2>:
 36c:	00 00       	nop
 36e:	3b 5a       	subi	r19, 0xAB	; 171
 370:	02 bb       	out	0x12, r16	; 18
 372:	d0 f2       	brcs	.-76     	; 0x328 <stuffN1Delay>

00000374 <stuff6Delay>:
 374:	27 95       	ror	r18
 376:	28 f4       	brcc	.+10     	; 0x382 <doExor6>
 378:	51 50       	subi	r21, 0x01	; 1
 37a:	29 f4       	brne	.+10     	; 0x386 <common6>
 37c:	22 0f       	add	r18, r18
 37e:	00 00       	nop
 380:	f9 cf       	rjmp	.-14     	; 0x374 <stuff6Delay>

00000382 <doExor6>:
 382:	01 27       	eor	r16, r17
 384:	56 e0       	ldi	r21, 0x06	; 6

00000386 <common6>:
 386:	27 95       	ror	r18
 388:	02 bb       	out	0x12, r16	; 18
 38a:	20 f4       	brcc	.+8      	; 0x394 <doExor7>
 38c:	51 50       	subi	r21, 0x01	; 1
 38e:	21 f4       	brne	.+8      	; 0x398 <common7>
 390:	22 0f       	add	r18, r18
 392:	f9 cf       	rjmp	.-14     	; 0x386 <common6>

00000394 <doExor7>:
 394:	01 27       	eor	r16, r17
 396:	56 e0       	ldi	r21, 0x06	; 6

00000398 <common7>:
 398:	29 91       	ld	r18, Y+
 39a:	33 23       	and	r19, r19
 39c:	02 bb       	out	0x12, r16	; 18
 39e:	21 f6       	brne	.-120    	; 0x328 <stuffN1Delay>
 3a0:	03 7f       	andi	r16, 0xF3	; 243
 3a2:	10 91 93 00 	lds	r17, 0x0093
 3a6:	11 0f       	add	r17, r17
 3a8:	c6 51       	subi	r28, 0x16	; 22
 3aa:	d0 40       	sbci	r29, 0x00	; 0
 3ac:	02 bb       	out	0x12, r16	; 18
 3ae:	11 f0       	breq	.+4      	; 0x3b4 <skipAddrAssign>
 3b0:	10 93 8d 00 	sts	0x008D, r17

000003b4 <skipAddrAssign>:
 3b4:	10 e4       	ldi	r17, 0x40	; 64
 3b6:	1a bf       	out	0x3a, r17	; 58
 3b8:	08 60       	ori	r16, 0x08	; 8
 3ba:	11 b3       	in	r17, 0x11	; 17
 3bc:	13 7f       	andi	r17, 0xF3	; 243
 3be:	40 2f       	mov	r20, r16
 3c0:	43 7f       	andi	r20, 0xF3	; 243
 3c2:	5f 91       	pop	r21
 3c4:	00 c0       	rjmp	.+0      	; 0x3c6 <skipAddrAssign+0x12>
 3c6:	00 c0       	rjmp	.+0      	; 0x3c8 <skipAddrAssign+0x14>
 3c8:	02 bb       	out	0x12, r16	; 18
 3ca:	11 bb       	out	0x11, r17	; 17
 3cc:	42 bb       	out	0x12, r20	; 18
 3ce:	71 cf       	rjmp	.-286    	; 0x2b2 <doReturn>

000003d0 <usbInit>:
/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbInit(void)
{
#if USB_INTR_CFG_SET != 0
    USB_INTR_CFG |= USB_INTR_CFG_SET;
 3d0:	85 b7       	in	r24, 0x35	; 53
 3d2:	83 60       	ori	r24, 0x03	; 3
 3d4:	85 bf       	out	0x35, r24	; 53
#endif
#if USB_INTR_CFG_CLR != 0
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
 3d6:	8b b7       	in	r24, 0x3b	; 59
 3d8:	80 64       	ori	r24, 0x40	; 64
 3da:	8b bf       	out	0x3b, r24	; 59
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
 3dc:	8b e4       	ldi	r24, 0x4B	; 75
 3de:	80 93 82 00 	sts	0x0082, r24
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
    usbResetDataToggling();
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    usbTxLen1 = USBPID_NAK;
 3e2:	8a e5       	ldi	r24, 0x5A	; 90
 3e4:	80 93 81 00 	sts	0x0081, r24
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
    usbTxLen3 = USBPID_NAK;
#endif
#endif
}
 3e8:	08 95       	ret

000003ea <usbSetInterrupt>:
    txStatus->len = len + 4;    /* len must be given including sync byte */
    DBG2(0x21 + (((int)txStatus >> 3) & 3), txStatus->buffer, len + 3);
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
 3ea:	1f 93       	push	r17
 3ec:	dc 01       	movw	r26, r24
 3ee:	16 2f       	mov	r17, r22
{
uchar   *p;
char    i;

#if USB_CFG_IMPLEMENT_HALT
    if(usbTxLen1 == USBPID_STALL)
 3f0:	80 91 81 00 	lds	r24, 0x0081
 3f4:	8e 31       	cpi	r24, 0x1E	; 30
 3f6:	e9 f0       	breq	.+58     	; 0x432 <usbSetInterrupt+0x48>
        return;
#endif
    if(txStatus->len & 0x10){   /* packet buffer was empty */
 3f8:	80 91 81 00 	lds	r24, 0x0081
 3fc:	84 ff       	sbrs	r24, 4
 3fe:	07 c0       	rjmp	.+14     	; 0x40e <usbSetInterrupt+0x24>
        txStatus->buffer[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* toggle token */
 400:	80 91 82 00 	lds	r24, 0x0082
 404:	98 e8       	ldi	r25, 0x88	; 136
 406:	89 27       	eor	r24, r25
 408:	80 93 82 00 	sts	0x0082, r24
 40c:	03 c0       	rjmp	.+6      	; 0x414 <usbSetInterrupt+0x2a>
    }else{
        txStatus->len = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
 40e:	8a e5       	ldi	r24, 0x5A	; 90
 410:	80 93 81 00 	sts	0x0081, r24
    }
    p = txStatus->buffer + 1;
    i = len;
 414:	91 2f       	mov	r25, r17
 416:	e3 e8       	ldi	r30, 0x83	; 131
 418:	f0 e0       	ldi	r31, 0x00	; 0
    do{                         /* if len == 0, we still copy 1 byte, but that's no problem */
        *p++ = *data++;
 41a:	8d 91       	ld	r24, X+
 41c:	81 93       	st	Z+, r24
    }while(--i > 0);            /* loop control at the end is 2 bytes shorter than at beginning */
 41e:	91 50       	subi	r25, 0x01	; 1
 420:	19 16       	cp	r1, r25
 422:	dc f3       	brlt	.-10     	; 0x41a <usbSetInterrupt+0x30>
    usbCrc16Append(&txStatus->buffer[1], len);
 424:	83 e8       	ldi	r24, 0x83	; 131
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	61 2f       	mov	r22, r17
 42a:	91 de       	rcall	.-734    	; 0x14e <usbCrc16Append>
    txStatus->len = len + 4;    /* len must be given including sync byte */
 42c:	1c 5f       	subi	r17, 0xFC	; 252
 42e:	10 93 81 00 	sts	0x0081, r17
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
    usbGenericSetInterrupt(data, len, &usbTxStatus1);
}
 432:	1f 91       	pop	r17
 434:	08 95       	ret

00000436 <usbPoll>:
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
{
 436:	1f 93       	push	r17
 438:	cf 93       	push	r28
 43a:	df 93       	push	r29
schar   len;
uchar   i;

    len = usbRxLen - 3;
 43c:	60 91 92 00 	lds	r22, 0x0092
 440:	63 50       	subi	r22, 0x03	; 3
    if(len >= 0){
 442:	67 fd       	sbrc	r22, 7
 444:	cb c0       	rjmp	.+406    	; 0x5dc <__stack+0x17d>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
 446:	80 91 8f 00 	lds	r24, 0x008F
 44a:	cc e0       	ldi	r28, 0x0C	; 12
 44c:	d0 e0       	ldi	r29, 0x00	; 0
 44e:	c8 1b       	sub	r28, r24
 450:	d1 09       	sbc	r29, r1
 452:	ca 56       	subi	r28, 0x6A	; 106
 454:	df 4f       	sbci	r29, 0xFF	; 255
 * 0...0x0f for OUT on endpoint X
 */
    DBG2(0x10 + (usbRxToken & 0xf), data, len + 2); /* SETUP=1d, SETUP-DATA=11, OUTx=1x */
    USB_RX_USER_HOOK(data, len)
#if USB_CFG_IMPLEMENT_FN_WRITEOUT
    if(usbRxToken < 0x10){  /* OUT to endpoint != 0: endpoint number in usbRxToken */
 456:	80 91 8e 00 	lds	r24, 0x008E
 45a:	80 31       	cpi	r24, 0x10	; 16
 45c:	18 f4       	brcc	.+6      	; 0x464 <__stack+0x5>
        usbFunctionWriteOut(data, len);
 45e:	ce 01       	movw	r24, r28
 460:	57 d1       	rcall	.+686    	; 0x710 <usbFunctionWriteOut>
 462:	ba c0       	rjmp	.+372    	; 0x5d8 <__stack+0x179>
        return;
    }
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
 464:	8d 32       	cpi	r24, 0x2D	; 45
 466:	09 f0       	breq	.+2      	; 0x46a <__stack+0xb>
 468:	a7 c0       	rjmp	.+334    	; 0x5b8 <__stack+0x159>
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
 46a:	68 30       	cpi	r22, 0x08	; 8
 46c:	09 f0       	breq	.+2      	; 0x470 <__stack+0x11>
 46e:	b4 c0       	rjmp	.+360    	; 0x5d8 <__stack+0x179>
            return;
        usbMsgLen_t replyLen;
        usbTxBuf[0] = USBPID_DATA0;         /* initialize data toggling */
 470:	83 ec       	ldi	r24, 0xC3	; 195
 472:	80 93 76 00 	sts	0x0076, r24
        usbTxLen = USBPID_NAK;              /* abort pending transmit */
 476:	8a e5       	ldi	r24, 0x5A	; 90
 478:	80 93 60 00 	sts	0x0060, r24
        usbMsgFlags = 0;
 47c:	10 92 72 00 	sts	0x0072, r1
        uchar type = rq->bmRequestType & USBRQ_TYPE_MASK;
        if(type != USBRQ_TYPE_STANDARD){    /* standard requests are handled by driver */
 480:	98 81       	ld	r25, Y
 482:	89 2f       	mov	r24, r25
 484:	80 76       	andi	r24, 0x60	; 96
 486:	21 f0       	breq	.+8      	; 0x490 <__stack+0x31>
            replyLen = usbFunctionSetup(data);
 488:	ce 01       	movw	r24, r28
 48a:	29 d1       	rcall	.+594    	; 0x6de <usbFunctionSetup>
 48c:	28 2f       	mov	r18, r24
 48e:	81 c0       	rjmp	.+258    	; 0x592 <__stack+0x133>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
uchar   len  = 0, *dataPtr = usbTxBuf + 9;  /* there are 2 bytes free space at the end of the buffer */
uchar   value = rq->wValue.bytes[0];
 490:	2a 81       	ldd	r18, Y+2	; 0x02
#if USB_CFG_IMPLEMENT_HALT
uchar   index = rq->wIndex.bytes[0];
 492:	3c 81       	ldd	r19, Y+4	; 0x04
#endif

    dataPtr[0] = 0; /* default reply common to USBRQ_GET_STATUS and USBRQ_GET_INTERFACE */
 494:	10 92 7f 00 	sts	0x007F, r1
    SWITCH_START(rq->bRequest)
 498:	89 81       	ldd	r24, Y+1	; 0x01
    SWITCH_CASE(USBRQ_GET_STATUS)           /* 0 */
 49a:	88 23       	and	r24, r24
 49c:	81 f4       	brne	.+32     	; 0x4be <__stack+0x5f>
        uchar recipient = rq->bmRequestType & USBRQ_RCPT_MASK;  /* assign arith ops to variables to enforce byte size */
        if(USB_CFG_IS_SELF_POWERED && recipient == USBRQ_RCPT_DEVICE)
            dataPtr[0] =  USB_CFG_IS_SELF_POWERED;
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
 49e:	9f 71       	andi	r25, 0x1F	; 31
 4a0:	92 30       	cpi	r25, 0x02	; 2
 4a2:	49 f4       	brne	.+18     	; 0x4b6 <__stack+0x57>
 4a4:	31 38       	cpi	r19, 0x81	; 129
 4a6:	39 f4       	brne	.+14     	; 0x4b6 <__stack+0x57>
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
 4a8:	80 91 81 00 	lds	r24, 0x0081
 4ac:	8e 31       	cpi	r24, 0x1E	; 30
 4ae:	19 f4       	brne	.+6      	; 0x4b6 <__stack+0x57>
 4b0:	81 e0       	ldi	r24, 0x01	; 1
 4b2:	80 93 7f 00 	sts	0x007F, r24
#endif
        dataPtr[1] = 0;
 4b6:	10 92 80 00 	sts	0x0080, r1
 4ba:	22 e0       	ldi	r18, 0x02	; 2
 4bc:	63 c0       	rjmp	.+198    	; 0x584 <__stack+0x125>
        len = 2;
#if USB_CFG_IMPLEMENT_HALT
    SWITCH_CASE2(USBRQ_CLEAR_FEATURE, USBRQ_SET_FEATURE)    /* 1, 3 */
 4be:	81 30       	cpi	r24, 0x01	; 1
 4c0:	11 f0       	breq	.+4      	; 0x4c6 <__stack+0x67>
 4c2:	83 30       	cpi	r24, 0x03	; 3
 4c4:	89 f4       	brne	.+34     	; 0x4e8 <__stack+0x89>
        if(value == 0 && index == 0x81){    /* feature 0 == HALT for endpoint == 1 */
 4c6:	22 23       	and	r18, r18
 4c8:	09 f0       	breq	.+2      	; 0x4cc <__stack+0x6d>
 4ca:	5b c0       	rjmp	.+182    	; 0x582 <__stack+0x123>
 4cc:	31 38       	cpi	r19, 0x81	; 129
 4ce:	09 f0       	breq	.+2      	; 0x4d2 <__stack+0x73>
 4d0:	58 c0       	rjmp	.+176    	; 0x582 <__stack+0x123>
            usbTxLen1 = rq->bRequest == USBRQ_CLEAR_FEATURE ? USBPID_NAK : USBPID_STALL;
 4d2:	81 30       	cpi	r24, 0x01	; 1
 4d4:	11 f0       	breq	.+4      	; 0x4da <__stack+0x7b>
 4d6:	8e e1       	ldi	r24, 0x1E	; 30
 4d8:	01 c0       	rjmp	.+2      	; 0x4dc <__stack+0x7d>
 4da:	8a e5       	ldi	r24, 0x5A	; 90
 4dc:	80 93 81 00 	sts	0x0081, r24
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
 4e0:	8b e4       	ldi	r24, 0x4B	; 75
 4e2:	80 93 82 00 	sts	0x0082, r24
 4e6:	4d c0       	rjmp	.+154    	; 0x582 <__stack+0x123>
        if(value == 0 && index == 0x81){    /* feature 0 == HALT for endpoint == 1 */
            usbTxLen1 = rq->bRequest == USBRQ_CLEAR_FEATURE ? USBPID_NAK : USBPID_STALL;
            usbResetDataToggling();
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
 4e8:	85 30       	cpi	r24, 0x05	; 5
 4ea:	19 f4       	brne	.+6      	; 0x4f2 <__stack+0x93>
        usbNewDeviceAddr = value;
 4ec:	20 93 93 00 	sts	0x0093, r18
 4f0:	48 c0       	rjmp	.+144    	; 0x582 <__stack+0x123>
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
 4f2:	86 30       	cpi	r24, 0x06	; 6
 4f4:	79 f5       	brne	.+94     	; 0x554 <__stack+0xf5>
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar       flags = USB_FLG_MSGPTR_IS_ROM;

    SWITCH_START(rq->wValue.bytes[1])
 4f6:	8b 81       	ldd	r24, Y+3	; 0x03
    SWITCH_CASE(USBDESCR_DEVICE)    /* 1 */
 4f8:	81 30       	cpi	r24, 0x01	; 1
 4fa:	11 f0       	breq	.+4      	; 0x500 <__stack+0xa1>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_DEVICE, usbDescriptorDevice)
    SWITCH_CASE(USBDESCR_CONFIG)    /* 2 */
 4fc:	82 30       	cpi	r24, 0x02	; 2
 4fe:	21 f4       	brne	.+8      	; 0x508 <__stack+0xa9>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_CONFIGURATION, usbDescriptorConfiguration)
 500:	ce 01       	movw	r24, r28
 502:	d9 d0       	rcall	.+434    	; 0x6b6 <usbFunctionDescriptor>
 504:	28 2f       	mov	r18, r24
 506:	22 c0       	rjmp	.+68     	; 0x54c <__stack+0xed>
    SWITCH_CASE(USBDESCR_STRING)    /* 3 */
 508:	83 30       	cpi	r24, 0x03	; 3
 50a:	f9 f4       	brne	.+62     	; 0x54a <__stack+0xeb>
#if USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC
        if(USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_RAM)
            flags = 0;
        len = usbFunctionDescriptor(rq);
#else   /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
        SWITCH_START(rq->wValue.bytes[0])
 50c:	8a 81       	ldd	r24, Y+2	; 0x02
        SWITCH_CASE(0)
 50e:	88 23       	and	r24, r24
 510:	41 f4       	brne	.+16     	; 0x522 <__stack+0xc3>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_0, usbDescriptorString0)
 512:	86 e2       	ldi	r24, 0x26	; 38
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	90 93 91 00 	sts	0x0091, r25
 51a:	80 93 90 00 	sts	0x0090, r24
 51e:	24 e0       	ldi	r18, 0x04	; 4
 520:	15 c0       	rjmp	.+42     	; 0x54c <__stack+0xed>
        SWITCH_CASE(1)
 522:	81 30       	cpi	r24, 0x01	; 1
 524:	41 f4       	brne	.+16     	; 0x536 <__stack+0xd7>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_VENDOR, usbDescriptorStringVendor)
 526:	8a e2       	ldi	r24, 0x2A	; 42
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	90 93 91 00 	sts	0x0091, r25
 52e:	80 93 90 00 	sts	0x0090, r24
 532:	22 e2       	ldi	r18, 0x22	; 34
 534:	0b c0       	rjmp	.+22     	; 0x54c <__stack+0xed>
        SWITCH_CASE(2)
 536:	82 30       	cpi	r24, 0x02	; 2
 538:	41 f4       	brne	.+16     	; 0x54a <__stack+0xeb>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_PRODUCT, usbDescriptorStringDevice)
 53a:	8c e4       	ldi	r24, 0x4C	; 76
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	90 93 91 00 	sts	0x0091, r25
 542:	80 93 90 00 	sts	0x0090, r24
 546:	26 e1       	ldi	r18, 0x16	; 22
 548:	01 c0       	rjmp	.+2      	; 0x54c <__stack+0xed>
 54a:	20 e0       	ldi	r18, 0x00	; 0
    SWITCH_DEFAULT
        if(USB_CFG_DESCR_PROPS_UNKNOWN & USB_PROP_IS_DYNAMIC){
            len = usbFunctionDescriptor(rq);
        }
    SWITCH_END
    usbMsgFlags = flags;
 54c:	80 e4       	ldi	r24, 0x40	; 64
 54e:	80 93 72 00 	sts	0x0072, r24
 552:	1f c0       	rjmp	.+62     	; 0x592 <__stack+0x133>
        usbNewDeviceAddr = value;
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
 554:	88 30       	cpi	r24, 0x08	; 8
 556:	21 f4       	brne	.+8      	; 0x560 <__stack+0x101>
 558:	21 e0       	ldi	r18, 0x01	; 1
 55a:	85 e9       	ldi	r24, 0x95	; 149
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	14 c0       	rjmp	.+40     	; 0x588 <__stack+0x129>
        dataPtr = &usbConfiguration;  /* send current configuration value */
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
 560:	89 30       	cpi	r24, 0x09	; 9
 562:	19 f4       	brne	.+6      	; 0x56a <__stack+0x10b>
        usbConfiguration = value;
 564:	20 93 95 00 	sts	0x0095, r18
 568:	09 c0       	rjmp	.+18     	; 0x57c <__stack+0x11d>
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
 56a:	8a 30       	cpi	r24, 0x0A	; 10
 56c:	11 f4       	brne	.+4      	; 0x572 <__stack+0x113>
 56e:	21 e0       	ldi	r18, 0x01	; 1
 570:	09 c0       	rjmp	.+18     	; 0x584 <__stack+0x125>
        len = 1;
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    SWITCH_CASE(USBRQ_SET_INTERFACE)        /* 11 */
 572:	8b 30       	cpi	r24, 0x0B	; 11
 574:	31 f4       	brne	.+12     	; 0x582 <__stack+0x123>
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
 576:	8b e4       	ldi	r24, 0x4B	; 75
 578:	80 93 82 00 	sts	0x0082, r24
}

static inline void  usbResetStall(void)
{
#if USB_CFG_IMPLEMENT_HALT && USB_CFG_HAVE_INTRIN_ENDPOINT
        usbTxLen1 = USBPID_NAK;
 57c:	8a e5       	ldi	r24, 0x5A	; 90
 57e:	80 93 81 00 	sts	0x0081, r24
 582:	20 e0       	ldi	r18, 0x00	; 0
 584:	8f e7       	ldi	r24, 0x7F	; 127
 586:	90 e0       	ldi	r25, 0x00	; 0
        usbResetStall();
#endif
    SWITCH_DEFAULT                          /* 7=SET_DESCRIPTOR, 12=SYNC_FRAME */
        /* Should we add an optional hook here? */
    SWITCH_END
    usbMsgPtr = dataPtr;
 588:	90 93 91 00 	sts	0x0091, r25
 58c:	80 93 90 00 	sts	0x0090, r24
 590:	09 c0       	rjmp	.+18     	; 0x5a4 <__stack+0x145>
            replyLen = usbFunctionSetup(data);
        }else{
            replyLen = usbDriverSetup(rq);
        }
#if USB_CFG_IMPLEMENT_FN_READ || USB_CFG_IMPLEMENT_FN_WRITE
        if(replyLen == USB_NO_MSG){         /* use user-supplied read/write function */
 592:	2f 3f       	cpi	r18, 0xFF	; 255
 594:	39 f4       	brne	.+14     	; 0x5a4 <__stack+0x145>
            /* do some conditioning on replyLen, but on IN transfers only */
            if((rq->bmRequestType & USBRQ_DIR_MASK) != USBRQ_DIR_HOST_TO_DEVICE){
 596:	88 81       	ld	r24, Y
 598:	87 fd       	sbrc	r24, 7
                if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
                    replyLen = rq->wLength.bytes[0];
 59a:	2e 81       	ldd	r18, Y+6	; 0x06
                }else{
                    replyLen = rq->wLength.word;
                }
            }
            usbMsgFlags = USB_FLG_USE_USER_RW;
 59c:	80 e8       	ldi	r24, 0x80	; 128
 59e:	80 93 72 00 	sts	0x0072, r24
 5a2:	06 c0       	rjmp	.+12     	; 0x5b0 <__stack+0x151>
        }else   /* The 'else' prevents that we limit a replyLen of USB_NO_MSG to the maximum transfer len. */
#endif
        if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
            if(!rq->wLength.bytes[1] && replyLen > rq->wLength.bytes[0])    /* limit length to max */
 5a4:	8f 81       	ldd	r24, Y+7	; 0x07
 5a6:	88 23       	and	r24, r24
 5a8:	19 f4       	brne	.+6      	; 0x5b0 <__stack+0x151>
 5aa:	8e 81       	ldd	r24, Y+6	; 0x06
 5ac:	82 17       	cp	r24, r18
 5ae:	08 f0       	brcs	.+2      	; 0x5b2 <__stack+0x153>
 5b0:	82 2f       	mov	r24, r18
                replyLen = rq->wLength.bytes[0];
        }else{
            if(replyLen > rq->wLength.word)     /* limit length to max */
                replyLen = rq->wLength.word;
        }
        usbMsgLen = replyLen;
 5b2:	80 93 61 00 	sts	0x0061, r24
 5b6:	10 c0       	rjmp	.+32     	; 0x5d8 <__stack+0x179>
    }else{  /* usbRxToken must be USBPID_OUT, which means data phase of setup (control-out) */
#if USB_CFG_IMPLEMENT_FN_WRITE
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
 5b8:	80 91 72 00 	lds	r24, 0x0072
 5bc:	87 ff       	sbrs	r24, 7
 5be:	0c c0       	rjmp	.+24     	; 0x5d8 <__stack+0x179>
            uchar rval = usbFunctionWrite(data, len);
 5c0:	ce 01       	movw	r24, r28
 5c2:	a4 d0       	rcall	.+328    	; 0x70c <usbFunctionWrite>
            if(rval == 0xff){   /* an error occurred */
 5c4:	8f 3f       	cpi	r24, 0xFF	; 255
 5c6:	21 f4       	brne	.+8      	; 0x5d0 <__stack+0x171>
                usbTxLen = USBPID_STALL;
 5c8:	8e e1       	ldi	r24, 0x1E	; 30
 5ca:	80 93 60 00 	sts	0x0060, r24
 5ce:	04 c0       	rjmp	.+8      	; 0x5d8 <__stack+0x179>
            }else if(rval != 0){    /* This was the final package */
 5d0:	88 23       	and	r24, r24
 5d2:	11 f0       	breq	.+4      	; 0x5d8 <__stack+0x179>
                usbMsgLen = 0;  /* answer with a zero-sized data packet */
 5d4:	10 92 61 00 	sts	0x0061, r1
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
#if USB_CFG_HAVE_FLOWCONTROL
        if(usbRxLen > 0)    /* only mark as available if not inactivated */
            usbRxLen = 0;
#else
        usbRxLen = 0;       /* mark rx buffer as available */
 5d8:	10 92 92 00 	sts	0x0092, r1
#endif
    }
    if(usbTxLen & 0x10){    /* transmit system idle */
 5dc:	80 91 60 00 	lds	r24, 0x0060
 5e0:	84 ff       	sbrs	r24, 4
 5e2:	58 c0       	rjmp	.+176    	; 0x694 <__stack+0x235>
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
 5e4:	80 91 61 00 	lds	r24, 0x0061
 5e8:	8f 3f       	cpi	r24, 0xFF	; 255
 5ea:	09 f4       	brne	.+2      	; 0x5ee <__stack+0x18f>
 5ec:	53 c0       	rjmp	.+166    	; 0x694 <__stack+0x235>
 5ee:	18 2f       	mov	r17, r24
 5f0:	89 30       	cpi	r24, 0x09	; 9
 5f2:	08 f0       	brcs	.+2      	; 0x5f6 <__stack+0x197>
 5f4:	18 e0       	ldi	r17, 0x08	; 8
uchar       len;

    wantLen = usbMsgLen;
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
 5f6:	81 1b       	sub	r24, r17
 5f8:	80 93 61 00 	sts	0x0061, r24
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
 5fc:	80 91 76 00 	lds	r24, 0x0076
 600:	98 e8       	ldi	r25, 0x88	; 136
 602:	89 27       	eor	r24, r25
 604:	80 93 76 00 	sts	0x0076, r24
/* This function is similar to usbFunctionRead(), but it's also called for
 * data handled automatically by the driver (e.g. descriptor reads).
 */
static uchar usbDeviceRead(uchar *data, uchar len)
{
    if(len > 0){    /* don't bother app with 0 sized reads */
 608:	11 23       	and	r17, r17
 60a:	91 f1       	breq	.+100    	; 0x670 <__stack+0x211>
#if USB_CFG_IMPLEMENT_FN_READ
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
 60c:	80 91 72 00 	lds	r24, 0x0072
 610:	87 ff       	sbrs	r24, 7
 612:	08 c0       	rjmp	.+16     	; 0x624 <__stack+0x1c5>
            len = usbFunctionRead(data, len);
 614:	87 e7       	ldi	r24, 0x77	; 119
 616:	90 e0       	ldi	r25, 0x00	; 0
 618:	61 2f       	mov	r22, r17
 61a:	6e d0       	rcall	.+220    	; 0x6f8 <usbFunctionRead>
 61c:	18 2f       	mov	r17, r24
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
 61e:	89 30       	cpi	r24, 0x09	; 9
 620:	98 f5       	brcc	.+102    	; 0x688 <__stack+0x229>
 622:	26 c0       	rjmp	.+76     	; 0x670 <__stack+0x211>
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
            len = usbFunctionRead(data, len);
        }else
#endif
        {
            uchar i = len, *r = usbMsgPtr;
 624:	20 91 90 00 	lds	r18, 0x0090
 628:	30 91 91 00 	lds	r19, 0x0091
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
 62c:	86 ff       	sbrs	r24, 6
 62e:	0d c0       	rjmp	.+26     	; 0x64a <__stack+0x1eb>
 630:	a7 e7       	ldi	r26, 0x77	; 119
 632:	b0 e0       	ldi	r27, 0x00	; 0
 634:	80 e0       	ldi	r24, 0x00	; 0
 636:	90 e0       	ldi	r25, 0x00	; 0
                do{
                    uchar c = USB_READ_FLASH(r);    /* assign to char size variable to enforce byte ops */
 638:	f9 01       	movw	r30, r18
 63a:	e8 0f       	add	r30, r24
 63c:	f9 1f       	adc	r31, r25
 63e:	e4 91       	lpm	r30, Z+
                    *data++ = c;
 640:	ed 93       	st	X+, r30
 642:	01 96       	adiw	r24, 0x01	; 1
                    r++;
                }while(--i);
 644:	18 17       	cp	r17, r24
 646:	c1 f7       	brne	.-16     	; 0x638 <__stack+0x1d9>
 648:	08 c0       	rjmp	.+16     	; 0x65a <__stack+0x1fb>
 64a:	91 2f       	mov	r25, r17
 64c:	d9 01       	movw	r26, r18
 64e:	e7 e7       	ldi	r30, 0x77	; 119
 650:	f0 e0       	ldi	r31, 0x00	; 0
            }else{  /* RAM data */
                do{
                    *data++ = *r++;
 652:	8d 91       	ld	r24, X+
 654:	81 93       	st	Z+, r24
                }while(--i);
 656:	91 50       	subi	r25, 0x01	; 1
 658:	e1 f7       	brne	.-8      	; 0x652 <__stack+0x1f3>
 65a:	11 50       	subi	r17, 0x01	; 1
 65c:	81 2f       	mov	r24, r17
 65e:	90 e0       	ldi	r25, 0x00	; 0
 660:	1f 5f       	subi	r17, 0xFF	; 255
 662:	01 96       	adiw	r24, 0x01	; 1
 664:	82 0f       	add	r24, r18
 666:	93 1f       	adc	r25, r19
            }
            usbMsgPtr = r;
 668:	90 93 91 00 	sts	0x0091, r25
 66c:	80 93 90 00 	sts	0x0090, r24
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
        usbCrc16Append(&usbTxBuf[1], len);
 670:	87 e7       	ldi	r24, 0x77	; 119
 672:	90 e0       	ldi	r25, 0x00	; 0
 674:	61 2f       	mov	r22, r17
 676:	6b dd       	rcall	.-1322   	; 0x14e <usbCrc16Append>
        len += 4;           /* length including sync byte */
 678:	61 2f       	mov	r22, r17
 67a:	6c 5f       	subi	r22, 0xFC	; 252
        if(len < 12)        /* a partial package identifies end of message */
 67c:	6c 30       	cpi	r22, 0x0C	; 12
 67e:	41 f0       	breq	.+16     	; 0x690 <__stack+0x231>
            usbMsgLen = USB_NO_MSG;
 680:	8f ef       	ldi	r24, 0xFF	; 255
 682:	80 93 61 00 	sts	0x0061, r24
 686:	04 c0       	rjmp	.+8      	; 0x690 <__stack+0x231>
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
        usbMsgLen = USB_NO_MSG;
 688:	8f ef       	ldi	r24, 0xFF	; 255
 68a:	80 93 61 00 	sts	0x0061, r24
 68e:	6e e1       	ldi	r22, 0x1E	; 30
    }
    usbTxLen = len;
 690:	60 93 60 00 	sts	0x0060, r22
 694:	94 e1       	ldi	r25, 0x14	; 20
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
        uchar usbLineStatus = USBIN & USBMASK;
 696:	80 b3       	in	r24, 0x10	; 16
        if(usbLineStatus != 0)  /* SE0 has ended */
 698:	8c 70       	andi	r24, 0x0C	; 12
 69a:	49 f4       	brne	.+18     	; 0x6ae <__stack+0x24f>
    if(usbTxLen & 0x10){    /* transmit system idle */
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
 69c:	91 50       	subi	r25, 0x01	; 1
 69e:	d9 f7       	brne	.-10     	; 0x696 <__stack+0x237>
        uchar usbLineStatus = USBIN & USBMASK;
        if(usbLineStatus != 0)  /* SE0 has ended */
            goto isNotReset;
    }
    /* RESET condition, called multiple times during reset */
    usbNewDeviceAddr = 0;
 6a0:	10 92 93 00 	sts	0x0093, r1
    usbDeviceAddr = 0;
 6a4:	10 92 8d 00 	sts	0x008D, r1
}

static inline void  usbResetStall(void)
{
#if USB_CFG_IMPLEMENT_HALT && USB_CFG_HAVE_INTRIN_ENDPOINT
        usbTxLen1 = USBPID_NAK;
 6a8:	8a e5       	ldi	r24, 0x5A	; 90
 6aa:	80 93 81 00 	sts	0x0081, r24
    usbDeviceAddr = 0;
    usbResetStall();
    DBG1(0xff, 0, 0);
isNotReset:
    usbHandleResetHook(i);
}
 6ae:	df 91       	pop	r29
 6b0:	cf 91       	pop	r28
 6b2:	1f 91       	pop	r17
 6b4:	08 95       	ret

000006b6 <usbFunctionDescriptor>:


uchar usbFunctionDescriptor(usbRequest_t * rq)
{

	if (rq->wValue.bytes[1] == USBDESCR_DEVICE) {
 6b6:	fc 01       	movw	r30, r24
 6b8:	83 81       	ldd	r24, Z+3	; 0x03
 6ba:	81 30       	cpi	r24, 0x01	; 1
 6bc:	41 f4       	brne	.+16     	; 0x6ce <usbFunctionDescriptor+0x18>
		usbMsgPtr = (uchar *) deviceDescrMIDI;
 6be:	84 e7       	ldi	r24, 0x74	; 116
 6c0:	90 e0       	ldi	r25, 0x00	; 0
 6c2:	90 93 91 00 	sts	0x0091, r25
 6c6:	80 93 90 00 	sts	0x0090, r24
 6ca:	82 e1       	ldi	r24, 0x12	; 18
 6cc:	08 95       	ret
		return sizeof(deviceDescrMIDI);
	} else {		/* must be config descriptor */
		usbMsgPtr = (uchar *) configDescrMIDI;
 6ce:	86 e8       	ldi	r24, 0x86	; 134
 6d0:	90 e0       	ldi	r25, 0x00	; 0
 6d2:	90 93 91 00 	sts	0x0091, r25
 6d6:	80 93 90 00 	sts	0x0090, r24
 6da:	85 e6       	ldi	r24, 0x65	; 101
		return sizeof(configDescrMIDI);
	}
}
 6dc:	08 95       	ret

000006de <usbFunctionSetup>:
/* ------------------------------------------------------------------------- */
/* ----------------------------- USB interface ----------------------------- */
/* ------------------------------------------------------------------------- */

uchar usbFunctionSetup(uchar data[8])
{
 6de:	fc 01       	movw	r30, r24
	usbRequest_t *rq = (void *) data;

	// DEBUG LED
	//PORTC ^= 0x01;

	if ((rq->bmRequestType & USBRQ_TYPE_MASK) == USBRQ_TYPE_CLASS) {	/* class request type */
 6e0:	e0 81       	ld	r30, Z
 6e2:	8e 2f       	mov	r24, r30
 6e4:	80 76       	andi	r24, 0x60	; 96
 6e6:	80 32       	cpi	r24, 0x20	; 32
 6e8:	29 f4       	brne	.+10     	; 0x6f4 <usbFunctionSetup+0x16>

		/*  Prepare bulk-in endpoint to respond to early termination   */
		if ((rq->bmRequestType & USBRQ_DIR_MASK) ==
 6ea:	e7 fd       	sbrc	r30, 7
 6ec:	03 c0       	rjmp	.+6      	; 0x6f4 <usbFunctionSetup+0x16>
		    USBRQ_DIR_HOST_TO_DEVICE)
			sendEmptyFrame = 1;
 6ee:	81 e0       	ldi	r24, 0x01	; 1
 6f0:	80 93 75 00 	sts	0x0075, r24
	}

	return 0xff;
}
 6f4:	8f ef       	ldi	r24, 0xFF	; 255
 6f6:	08 95       	ret

000006f8 <usbFunctionRead>:
/*---------------------------------------------------------------------------*/
/* usbFunctionRead                                                           */
/*---------------------------------------------------------------------------*/

uchar usbFunctionRead(uchar * data, uchar len)
{
 6f8:	fc 01       	movw	r30, r24
	// DEBUG LED
	//PORTC ^= 0x02;

	data[0] = 0;
 6fa:	10 82       	st	Z, r1
	data[1] = 0;
 6fc:	11 82       	std	Z+1, r1	; 0x01
	data[2] = 0;
 6fe:	12 82       	std	Z+2, r1	; 0x02
	data[3] = 0;
 700:	13 82       	std	Z+3, r1	; 0x03
	data[4] = 0;
 702:	14 82       	std	Z+4, r1	; 0x04
	data[5] = 0;
 704:	15 82       	std	Z+5, r1	; 0x05
	data[6] = 0;
 706:	16 82       	std	Z+6, r1	; 0x06

	return 7;
}
 708:	87 e0       	ldi	r24, 0x07	; 7
 70a:	08 95       	ret

0000070c <usbFunctionWrite>:
uchar usbFunctionWrite(uchar * data, uchar len)
{
	// DEBUG LED
	//PORTC ^= 0x04;
	return 1;
}
 70c:	81 e0       	ldi	r24, 0x01	; 1
 70e:	08 95       	ret

00000710 <usbFunctionWriteOut>:

void usbFunctionWriteOut(uchar * data, uchar len)
{
	// DEBUG LED
	//PORTC ^= 0x20;
}
 710:	08 95       	ret

00000712 <adc>:

int adc(uchar adctouse)
{
    int ADCval;

    ADMUX = adctouse;         // use #1 ADC
 712:	87 b9       	out	0x07, r24	; 7
    ADMUX |= (1 << REFS0);    // use AVcc as the reference
 714:	3e 9a       	sbi	0x07, 6	; 7
    ADMUX &= ~(1 << ADLAR);   // clear for 10 bit resolution
 716:	3d 98       	cbi	0x07, 5	; 7

    ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);    // 128 prescale for 8Mhz
 718:	86 b1       	in	r24, 0x06	; 6
 71a:	87 60       	ori	r24, 0x07	; 7
 71c:	86 b9       	out	0x06, r24	; 6
    ADCSRA |= (1 << ADEN);    // Enable the ADC
 71e:	37 9a       	sbi	0x06, 7	; 6

    ADCSRA |= (1 << ADSC);    // Start the ADC conversion
 720:	36 9a       	sbi	0x06, 6	; 6

    while(ADCSRA & (1 << ADSC));      // Thanks T, this line waits for the ADC to finish 
 722:	36 99       	sbic	0x06, 6	; 6
 724:	fe cf       	rjmp	.-4      	; 0x722 <adc+0x10>


    ADCval = ADCL;
 726:	94 b1       	in	r25, 0x04	; 4
    ADCval = (ADCH << 8) + ADCval;    // ADCH is read so ADC can be updated again
 728:	85 b1       	in	r24, 0x05	; 5
 72a:	38 2f       	mov	r19, r24
 72c:	20 e0       	ldi	r18, 0x00	; 0
 72e:	29 0f       	add	r18, r25
 730:	31 1d       	adc	r19, r1

    return ADCval;
}
 732:	c9 01       	movw	r24, r18
 734:	08 95       	ret

00000736 <mutematrix>:



void mutematrix(){
		DDRC=0;
 736:	14 ba       	out	0x14, r1	; 20
		PORTC=0xFF;
 738:	8f ef       	ldi	r24, 0xFF	; 255
 73a:	85 bb       	out	0x15, r24	; 21
	    DDRB=0;
 73c:	17 ba       	out	0x17, r1	; 23
		PORTB=0xFF;  
 73e:	88 bb       	out	0x18, r24	; 24

}
 740:	08 95       	ret

00000742 <scanKeys>:
/*---------------------------------------------------------------------------*/
/* scanKeys()                                                                */
/* Reads keys status and put the key pressed in a buffer                     */
/*---------------------------------------------------------------------------*/

uint8_t scanKeys(uint8_t* notes,uint8_t size){
 742:	ef 92       	push	r14
 744:	ff 92       	push	r15
 746:	0f 93       	push	r16
 748:	1f 93       	push	r17
 74a:	cf 93       	push	r28
 74c:	df 93       	push	r29
 74e:	ec 01       	movw	r28, r24
 750:	16 2f       	mov	r17, r22
  uint8_t count=0;
  uint8_t key=1;
	uchar data, col;
	int i,j;
  memset(notes,0,size);
 752:	60 e0       	ldi	r22, 0x00	; 0
 754:	70 e0       	ldi	r23, 0x00	; 0
 756:	41 2f       	mov	r20, r17
 758:	50 e0       	ldi	r21, 0x00	; 0
 75a:	d2 d1       	rcall	.+932    	; 0xb00 <memset>
}



void mutematrix(){
		DDRC=0;
 75c:	14 ba       	out	0x14, r1	; 20
		PORTC=0xFF;
 75e:	8f ef       	ldi	r24, 0xFF	; 255
 760:	85 bb       	out	0x15, r24	; 21
	    DDRB=0;
 762:	17 ba       	out	0x17, r1	; 23
		PORTB=0xFF;  
 764:	88 bb       	out	0x18, r24	; 24
 766:	a0 e0       	ldi	r26, 0x00	; 0
 768:	b1 e0       	ldi	r27, 0x01	; 1
 76a:	60 e0       	ldi	r22, 0x00	; 0
 76c:	70 e0       	ldi	r23, 0x00	; 0
      data=pgm_read_byte(&modmask[i]);
      DDRB=data;
      PORTB&=~data;
    } else { // 3 extra rows are on PORTB
      DDRB=0;
      PORTB=0xFF; // clear port B z-state
 76e:	0f ef       	ldi	r16, 0xFF	; 255
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 770:	80 e3       	ldi	r24, 0x30	; 48
 772:	e8 2e       	mov	r14, r24
 774:	85 e7       	ldi	r24, 0x75	; 117
 776:	f8 2e       	mov	r15, r24
	int i,j;
  memset(notes,0,size);
 				mutematrix();

  for(i=0;i<8;i++){
     if (i<6) {//set row line
 778:	66 30       	cpi	r22, 0x06	; 6
 77a:	71 05       	cpc	r23, r1
 77c:	64 f4       	brge	.+24     	; 0x796 <scanKeys+0x54>
	  DDRC=0;
 77e:	14 ba       	out	0x14, r1	; 20
	  PORTC=0xFF; // clear port C z-state
 780:	05 bb       	out	0x15, r16	; 21
      data=pgm_read_byte(&modmask[i]);
 782:	fb 01       	movw	r30, r22
 784:	ee 59       	subi	r30, 0x9E	; 158
 786:	ff 4f       	sbci	r31, 0xFF	; 255
 788:	e4 91       	lpm	r30, Z+
      DDRB=data;
 78a:	e7 bb       	out	0x17, r30	; 23
      PORTB&=~data;
 78c:	88 b3       	in	r24, 0x18	; 24
 78e:	e0 95       	com	r30
 790:	e8 23       	and	r30, r24
 792:	e8 bb       	out	0x18, r30	; 24
 794:	0b c0       	rjmp	.+22     	; 0x7ac <scanKeys+0x6a>
    } else { // 3 extra rows are on PORTB
      DDRB=0;
 796:	17 ba       	out	0x17, r1	; 23
      PORTB=0xFF; // clear port B z-state
 798:	08 bb       	out	0x18, r16	; 24
      data=pgm_read_byte(&extrows[i-6]);
 79a:	fb 01       	movw	r30, r22
 79c:	ee 59       	subi	r30, 0x9E	; 158
 79e:	ff 4f       	sbci	r31, 0xFF	; 255
 7a0:	e4 91       	lpm	r30, Z+
      DDRC=data;
 7a2:	e4 bb       	out	0x14, r30	; 20
      PORTC&=~data;
 7a4:	85 b3       	in	r24, 0x15	; 21
 7a6:	e0 95       	com	r30
 7a8:	e8 23       	and	r30, r24
 7aa:	e5 bb       	out	0x15, r30	; 21
 7ac:	c7 01       	movw	r24, r14
 7ae:	01 97       	sbiw	r24, 0x01	; 1
 7b0:	f1 f7       	brne	.-4      	; 0x7ae <scanKeys+0x6c>
 7b2:	4a e6       	ldi	r20, 0x6A	; 106
 7b4:	50 e0       	ldi	r21, 0x00	; 0
    }
    _delay_ms(10);//without this it would glitch
	
    for(j=0;j<5;j++){
		col = pgm_read_byte(&columns[j]);
 7b6:	fa 01       	movw	r30, r20
 7b8:	24 91       	lpm	r18, Z+
      if(~PIND&(col)){ //read port D
 7ba:	80 b3       	in	r24, 0x10	; 16
 7bc:	30 e0       	ldi	r19, 0x00	; 0
 7be:	90 e0       	ldi	r25, 0x00	; 0
 7c0:	80 95       	com	r24
 7c2:	90 95       	com	r25
 7c4:	28 23       	and	r18, r24
 7c6:	39 23       	and	r19, r25
 7c8:	23 2b       	or	r18, r19
 7ca:	39 f0       	breq	.+14     	; 0x7da <scanKeys+0x98>
        notes[count]=key;
 7cc:	fe 01       	movw	r30, r28
 7ce:	ea 0f       	add	r30, r26
 7d0:	f1 1d       	adc	r31, r1
 7d2:	b0 83       	st	Z, r27
        count++;
 7d4:	af 5f       	subi	r26, 0xFF	; 255
        if (count==size) {
 7d6:	a1 17       	cp	r26, r17
 7d8:	69 f0       	breq	.+26     	; 0x7f4 <scanKeys+0xb2>
				mutematrix();
					return count;
        }
      }
      key++;
 7da:	bf 5f       	subi	r27, 0xFF	; 255
 7dc:	4f 5f       	subi	r20, 0xFF	; 255
 7de:	5f 4f       	sbci	r21, 0xFF	; 255
      DDRC=data;
      PORTC&=~data;
    }
    _delay_ms(10);//without this it would glitch
	
    for(j=0;j<5;j++){
 7e0:	f0 e0       	ldi	r31, 0x00	; 0
 7e2:	4f 36       	cpi	r20, 0x6F	; 111
 7e4:	5f 07       	cpc	r21, r31
 7e6:	39 f7       	brne	.-50     	; 0x7b6 <scanKeys+0x74>
	uchar data, col;
	int i,j;
  memset(notes,0,size);
 				mutematrix();

  for(i=0;i<8;i++){
 7e8:	6f 5f       	subi	r22, 0xFF	; 255
 7ea:	7f 4f       	sbci	r23, 0xFF	; 255
 7ec:	68 30       	cpi	r22, 0x08	; 8
 7ee:	71 05       	cpc	r23, r1
 7f0:	09 f0       	breq	.+2      	; 0x7f4 <scanKeys+0xb2>
 7f2:	c2 cf       	rjmp	.-124    	; 0x778 <scanKeys+0x36>
}



void mutematrix(){
		DDRC=0;
 7f4:	14 ba       	out	0x14, r1	; 20
		PORTC=0xFF;
 7f6:	8f ef       	ldi	r24, 0xFF	; 255
 7f8:	85 bb       	out	0x15, r24	; 21
	    DDRB=0;
 7fa:	17 ba       	out	0x17, r1	; 23
		PORTB=0xFF;  
 7fc:	88 bb       	out	0x18, r24	; 24
      key++;
    }
  }
				mutematrix();
	return count;
}
 7fe:	8a 2f       	mov	r24, r26
 800:	df 91       	pop	r29
 802:	cf 91       	pop	r28
 804:	1f 91       	pop	r17
 806:	0f 91       	pop	r16
 808:	ff 90       	pop	r15
 80a:	ef 90       	pop	r14
 80c:	08 95       	ret

0000080e <main>:


int j=0;
const char adcChannels[5] PROGMEM = { 2, 3, 4, 5, 7 };
int main(void)
{
 80e:	2f 92       	push	r2
 810:	3f 92       	push	r3
 812:	4f 92       	push	r4
 814:	5f 92       	push	r5
 816:	6f 92       	push	r6
 818:	7f 92       	push	r7
 81a:	8f 92       	push	r8
 81c:	9f 92       	push	r9
 81e:	af 92       	push	r10
 820:	bf 92       	push	r11
 822:	cf 92       	push	r12
 824:	df 92       	push	r13
 826:	ef 92       	push	r14
 828:	ff 92       	push	r15
 82a:	0f 93       	push	r16
 82c:	1f 93       	push	r17
 82e:	df 93       	push	r29
 830:	cf 93       	push	r28
 832:	cd b7       	in	r28, 0x3d	; 61
 834:	de b7       	in	r29, 0x3e	; 62
 836:	e6 97       	sbiw	r28, 0x36	; 54
 838:	0f b6       	in	r0, 0x3f	; 63
 83a:	f8 94       	cli
 83c:	de bf       	out	0x3e, r29	; 62
 83e:	0f be       	out	0x3f, r0	; 63
 840:	cd bf       	out	0x3d, r28	; 61

	int adcOld[8] = { -1, -1, -1, -1, -1, -1, -1, -1 };
 842:	de 01       	movw	r26, r28
 844:	55 96       	adiw	r26, 0x15	; 21
 846:	e2 e6       	ldi	r30, 0x62	; 98
 848:	f0 e0       	ldi	r31, 0x00	; 0
 84a:	80 e1       	ldi	r24, 0x10	; 16
 84c:	01 90       	ld	r0, Z+
 84e:	0d 92       	st	X+, r0
 850:	81 50       	subi	r24, 0x01	; 1
 852:	e1 f7       	brne	.-8      	; 0x84c <main+0x3e>
	uchar midiMsg[16];
	uchar iii;
//	uchar nA;
	uchar keys[10];
	uchar lastKeys[10];
	memset (keys,0,10);
 854:	8a e0       	ldi	r24, 0x0A	; 10
 856:	fe 01       	movw	r30, r28
 858:	31 96       	adiw	r30, 0x01	; 1
 85a:	df 01       	movw	r26, r30
 85c:	28 2f       	mov	r18, r24
 85e:	1d 92       	st	X+, r1
 860:	2a 95       	dec	r18
 862:	e9 f7       	brne	.-6      	; 0x85e <main+0x50>
	memset (lastKeys,0,10);
 864:	fe 01       	movw	r30, r28
 866:	3b 96       	adiw	r30, 0x0b	; 11
 868:	df 01       	movw	r26, r30
 86a:	1d 92       	st	X+, r1
 86c:	8a 95       	dec	r24
 86e:	e9 f7       	brne	.-6      	; 0x86a <main+0x5c>


	wdt_enable(WDTO_1S);
 870:	2e e0       	ldi	r18, 0x0E	; 14
 872:	88 e1       	ldi	r24, 0x18	; 24
 874:	90 e0       	ldi	r25, 0x00	; 0
 876:	0f b6       	in	r0, 0x3f	; 63
 878:	f8 94       	cli
 87a:	a8 95       	wdr
 87c:	81 bd       	out	0x21, r24	; 33
 87e:	0f be       	out	0x3f, r0	; 63
 880:	21 bd       	out	0x21, r18	; 33
static void hardwareInit(void)
{
	uchar i, j;

	/* activate pull-ups except on USB lines */
	USB_CFG_IOPORT =
 882:	83 ef       	ldi	r24, 0xF3	; 243
 884:	82 bb       	out	0x12, r24	; 18
	/* all pins input except USB (-> USB reset) */
#ifdef USB_CFG_PULLUP_IOPORT	/* use usbDeviceConnect()/usbDeviceDisconnect() if available */
	USBDDR = 0;		/* we do RESET by deactivating pullup */
	usbDeviceDisconnect();
#else
	USBDDR = (1 << USB_CFG_DMINUS_BIT) | (1 << USB_CFG_DPLUS_BIT);
 886:	8c e0       	ldi	r24, 0x0C	; 12
 888:	81 bb       	out	0x11, r24	; 17
		while (--i);	/* delay >10ms for USB reset */
	}
#ifdef USB_CFG_PULLUP_IOPORT
	usbDeviceConnect();
#else
	USBDDR = 0;		/*  remove USB reset condition */
 88a:	11 ba       	out	0x11, r1	; 17
	// enable, prescaler = 2^6 (-> 12Mhz / 64 = 187.5 kHz)
	//
	
	//ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (0 << ADPS0);

	PORTD = 0xff;   /* activate all pull-ups */
 88c:	8f ef       	ldi	r24, 0xFF	; 255
 88e:	82 bb       	out	0x12, r24	; 18
	DDRD = 0;       /*pins input */
 890:	11 ba       	out	0x11, r1	; 17

// keys/switches setup
// PORTB has eight keys (active low).
	PORTB = 0x00;		/* activate all pull-ups */
 892:	18 ba       	out	0x18, r1	; 24
	DDRB = 0xff;		/* all pins output */
 894:	87 bb       	out	0x17, r24	; 23
// PORTC has eight (debug) LEDs (active low).
	PORTC = 0xff;		/* off */
 896:	85 bb       	out	0x15, r24	; 21
	DDRC = 0x0f;		/*  pins output */
 898:	8f e0       	ldi	r24, 0x0F	; 15
 89a:	84 bb       	out	0x14, r24	; 20


	wdt_enable(WDTO_1S);
	hardwareInit();
	odDebugInit();
	usbInit();
 89c:	99 dd       	rcall	.-1230   	; 0x3d0 <usbInit>

	sendEmptyFrame = 0;
 89e:	10 92 75 00 	sts	0x0075, r1

	sei();
 8a2:	78 94       	sei
 8a4:	99 24       	eor	r9, r9
	uchar keyPressed=0,keyReleased=0;
	for (;;) {		
		wdt_reset();
		usbPoll();
		int k,l;
		scanKeys(keys,10);
 8a6:	6e 01       	movw	r12, r28
 8a8:	08 94       	sec
 8aa:	c1 1c       	adc	r12, r1
 8ac:	d1 1c       	adc	r13, r1
 8ae:	bb e0       	ldi	r27, 0x0B	; 11
 8b0:	ab 2e       	mov	r10, r27
 8b2:	b1 2c       	mov	r11, r1
 8b4:	ac 0e       	add	r10, r28
 8b6:	bd 1e       	adc	r11, r29
				if(lastKeys[j]==keys[k]){
						keyReleased=0;
					break;
				}
			}
			for(l=0;l<10;l++){
 8b8:	a5 e1       	ldi	r26, 0x15	; 21
 8ba:	6a 2e       	mov	r6, r26
 8bc:	71 2c       	mov	r7, r1
 8be:	6c 0e       	add	r6, r28
 8c0:	7d 1e       	adc	r7, r29
					midiMsg[0] = 0x0b;
					midiMsg[1] = 0xb0;
					midiMsg[2] = channel + 70;	// cc 70..77 
					midiMsg[3] = value >> 3;
					sendEmptyFrame = 0;
					usbSetInterrupt(midiMsg, 4);
 8c2:	f5 e2       	ldi	r31, 0x25	; 37
 8c4:	ef 2e       	mov	r14, r31
 8c6:	f1 2c       	mov	r15, r1
 8c8:	ec 0e       	add	r14, r28
 8ca:	fd 1e       	adc	r15, r29
					// DEBUG LED
					//PORTC ^= 0xff;
					
					adcOld[channel] = value;
					// MIDI CC msg
					midiMsg[0] = 0x0b;
 8cc:	eb e0       	ldi	r30, 0x0B	; 11
 8ce:	4e 2e       	mov	r4, r30
					midiMsg[1] = 0xb0;
 8d0:	70 eb       	ldi	r23, 0xB0	; 176
 8d2:	37 2e       	mov	r3, r23
						midiMsg[iii++] = 0x90;
						midiMsg[iii++] = keys[j]+35;
						midiMsg[iii++] = 0x7f;
					}
					if (8 == iii)
						sendEmptyFrame = 1;
 8d4:	22 24       	eor	r2, r2
 8d6:	23 94       	inc	r2
					// For description of USB MIDI msg see:
					// http://www.usb.org/developers/devclass_docs/midi10.pdf
					// 4. USB MIDI Event Packets
					iii = 0;
					if (keyReleased) {	
						midiMsg[iii++] = 0x08;
 8d8:	68 e0       	ldi	r22, 0x08	; 8
 8da:	86 2e       	mov	r8, r22
						midiMsg[iii++] = 0x80;
 8dc:	50 e8       	ldi	r21, 0x80	; 128
 8de:	55 2e       	mov	r5, r21
	sei();


	uchar keyPressed=0,keyReleased=0;
	for (;;) {		
		wdt_reset();
 8e0:	a8 95       	wdr
		usbPoll();
 8e2:	a9 dd       	rcall	.-1198   	; 0x436 <usbPoll>
		int k,l;
		scanKeys(keys,10);
 8e4:	c6 01       	movw	r24, r12
 8e6:	6a e0       	ldi	r22, 0x0A	; 10
 8e8:	2c df       	rcall	.-424    	; 0x742 <scanKeys>


		for(j=0;j<10;j++){
 8ea:	10 92 74 00 	sts	0x0074, r1
 8ee:	10 92 73 00 	sts	0x0073, r1
 8f2:	a5 c0       	rjmp	.+330    	; 0xa3e <main+0x230>
			keyPressed=1;
			keyReleased=1;
			for(k=0;k<10;k++){//can be reduced
				if(lastKeys[j]==keys[k]){
 8f4:	8c 91       	ld	r24, X
 8f6:	e8 17       	cp	r30, r24
 8f8:	11 f4       	brne	.+4      	; 0x8fe <main+0xf0>
 8fa:	00 e0       	ldi	r16, 0x00	; 0
 8fc:	05 c0       	rjmp	.+10     	; 0x908 <main+0xfa>
 8fe:	11 96       	adiw	r26, 0x01	; 1


		for(j=0;j<10;j++){
			keyPressed=1;
			keyReleased=1;
			for(k=0;k<10;k++){//can be reduced
 900:	aa 15       	cp	r26, r10
 902:	bb 05       	cpc	r27, r11
 904:	b9 f7       	brne	.-18     	; 0x8f4 <main+0xe6>
 906:	01 e0       	ldi	r16, 0x01	; 1
						keyReleased=0;
					break;
				}
			}
			for(l=0;l<10;l++){
				if(keys[j]==lastKeys[l]){
 908:	2c 0d       	add	r18, r12
 90a:	3d 1d       	adc	r19, r13
 90c:	f9 01       	movw	r30, r18
 90e:	90 81       	ld	r25, Z
 910:	f5 01       	movw	r30, r10
 912:	80 81       	ld	r24, Z
 914:	98 17       	cp	r25, r24
 916:	11 f4       	brne	.+4      	; 0x91c <main+0x10e>
 918:	10 e0       	ldi	r17, 0x00	; 0
 91a:	08 c0       	rjmp	.+16     	; 0x92c <main+0x11e>
 91c:	31 96       	adiw	r30, 0x01	; 1
				if(lastKeys[j]==keys[k]){
						keyReleased=0;
					break;
				}
			}
			for(l=0;l<10;l++){
 91e:	e6 15       	cp	r30, r6
 920:	f7 05       	cpc	r31, r7
 922:	b9 f7       	brne	.-18     	; 0x912 <main+0x104>
 924:	11 e0       	ldi	r17, 0x01	; 1
 926:	02 c0       	rjmp	.+4      	; 0x92c <main+0x11e>
				if(keys[j]==lastKeys[l]){
						keyPressed=0;
					break;
				}
			}
			while(!usbInterruptIsReady()){		wdt_reset();
 928:	a8 95       	wdr
		usbPoll();};
 92a:	85 dd       	rcall	.-1270   	; 0x436 <usbPoll>
				if(keys[j]==lastKeys[l]){
						keyPressed=0;
					break;
				}
			}
			while(!usbInterruptIsReady()){		wdt_reset();
 92c:	80 91 81 00 	lds	r24, 0x0081
 930:	84 ff       	sbrs	r24, 4
 932:	fa cf       	rjmp	.-12     	; 0x928 <main+0x11a>
		usbPoll();};
			if (usbInterruptIsReady()) {
 934:	80 91 81 00 	lds	r24, 0x0081
 938:	84 ff       	sbrs	r24, 4
 93a:	78 c0       	rjmp	.+240    	; 0xa2c <main+0x21e>
				if (keyPressed|keyReleased) {
 93c:	81 2f       	mov	r24, r17
 93e:	80 2b       	or	r24, r16
 940:	e9 f1       	breq	.+122    	; 0x9bc <main+0x1ae>
					// up to two midi events in one midi msg.
					// For description of USB MIDI msg see:
					// http://www.usb.org/developers/devclass_docs/midi10.pdf
					// 4. USB MIDI Event Packets
					iii = 0;
					if (keyReleased) {	
 942:	00 23       	and	r16, r16
 944:	11 f4       	brne	.+4      	; 0x94a <main+0x13c>
 946:	60 e0       	ldi	r22, 0x00	; 0
 948:	0d c0       	rjmp	.+26     	; 0x964 <main+0x156>
						midiMsg[iii++] = 0x08;
 94a:	8d a2       	std	Y+37, r8	; 0x25
						midiMsg[iii++] = 0x80;
 94c:	5e a2       	std	Y+38, r5	; 0x26
						midiMsg[iii++] = lastKeys[j]+35;
 94e:	e0 91 73 00 	lds	r30, 0x0073
 952:	f0 91 74 00 	lds	r31, 0x0074
 956:	ea 0d       	add	r30, r10
 958:	fb 1d       	adc	r31, r11
 95a:	80 81       	ld	r24, Z
 95c:	8d 5d       	subi	r24, 0xDD	; 221
 95e:	8f a3       	std	Y+39, r24	; 0x27
						midiMsg[iii++] = 0x00;
 960:	18 a6       	std	Y+40, r1	; 0x28
 962:	64 e0       	ldi	r22, 0x04	; 4
					}
					if (keyPressed) {	
 964:	11 23       	and	r17, r17
 966:	29 f1       	breq	.+74     	; 0x9b2 <main+0x1a4>
						midiMsg[iii++] = 0x09;
 968:	f7 01       	movw	r30, r14
 96a:	e6 0f       	add	r30, r22
 96c:	f1 1d       	adc	r31, r1
 96e:	29 e0       	ldi	r18, 0x09	; 9
 970:	20 83       	st	Z, r18
 972:	96 2f       	mov	r25, r22
 974:	9f 5f       	subi	r25, 0xFF	; 255
						midiMsg[iii++] = 0x90;
 976:	f7 01       	movw	r30, r14
 978:	e9 0f       	add	r30, r25
 97a:	f1 1d       	adc	r31, r1
 97c:	30 e9       	ldi	r19, 0x90	; 144
 97e:	30 83       	st	Z, r19
 980:	9f 5f       	subi	r25, 0xFF	; 255
						midiMsg[iii++] = keys[j]+35;
 982:	d7 01       	movw	r26, r14
 984:	a9 0f       	add	r26, r25
 986:	b1 1d       	adc	r27, r1
 988:	e0 91 73 00 	lds	r30, 0x0073
 98c:	f0 91 74 00 	lds	r31, 0x0074
 990:	ec 0d       	add	r30, r12
 992:	fd 1d       	adc	r31, r13
 994:	80 81       	ld	r24, Z
 996:	8d 5d       	subi	r24, 0xDD	; 221
 998:	8c 93       	st	X, r24
 99a:	9f 5f       	subi	r25, 0xFF	; 255
						midiMsg[iii++] = 0x7f;
 99c:	f7 01       	movw	r30, r14
 99e:	e9 0f       	add	r30, r25
 9a0:	f1 1d       	adc	r31, r1
 9a2:	8f e7       	ldi	r24, 0x7F	; 127
 9a4:	80 83       	st	Z, r24
 9a6:	6c 5f       	subi	r22, 0xFC	; 252
					}
					if (8 == iii)
 9a8:	68 30       	cpi	r22, 0x08	; 8
 9aa:	19 f4       	brne	.+6      	; 0x9b2 <main+0x1a4>
						sendEmptyFrame = 1;
 9ac:	20 92 75 00 	sts	0x0075, r2
 9b0:	02 c0       	rjmp	.+4      	; 0x9b6 <main+0x1a8>
					else
						sendEmptyFrame = 0;
 9b2:	10 92 75 00 	sts	0x0075, r1
					usbSetInterrupt(midiMsg, iii);
 9b6:	c7 01       	movw	r24, r14
 9b8:	18 dd       	rcall	.-1488   	; 0x3ea <usbSetInterrupt>
 9ba:	37 c0       	rjmp	.+110    	; 0xa2a <main+0x21c>
		//usbPoll();
				}
				else{

					// if no key event check analog input
					channel = pgm_read_byte(&adcChannels[adcindex%5] );
 9bc:	89 2d       	mov	r24, r9
 9be:	65 e0       	ldi	r22, 0x05	; 5
 9c0:	5f d0       	rcall	.+190    	; 0xa80 <__divmodqi4>
 9c2:	e9 2f       	mov	r30, r25
 9c4:	ff 27       	eor	r31, r31
 9c6:	e7 fd       	sbrc	r30, 7
 9c8:	f0 95       	com	r31
 9ca:	e1 59       	subi	r30, 0x91	; 145
 9cc:	ff 4f       	sbci	r31, 0xFF	; 255
 9ce:	04 91       	lpm	r16, Z+
				value = (adc(channel)+adc(channel))/2;	// 0..1023
 9d0:	80 2f       	mov	r24, r16
 9d2:	9f de       	rcall	.-706    	; 0x712 <adc>
 9d4:	9e ab       	std	Y+54, r25	; 0x36
 9d6:	8d ab       	std	Y+53, r24	; 0x35
 9d8:	80 2f       	mov	r24, r16
 9da:	9b de       	rcall	.-714    	; 0x712 <adc>
 9dc:	ad a9       	ldd	r26, Y+53	; 0x35
 9de:	be a9       	ldd	r27, Y+54	; 0x36
 9e0:	8a 0f       	add	r24, r26
 9e2:	9b 1f       	adc	r25, r27
 9e4:	62 e0       	ldi	r22, 0x02	; 2
 9e6:	70 e0       	ldi	r23, 0x00	; 0
 9e8:	58 d0       	rcall	.+176    	; 0xa9a <__divmodhi4>
 9ea:	9b 01       	movw	r18, r22
				// hysteresis
				if (adcOld[channel] - value > 7
 9ec:	e0 2f       	mov	r30, r16
 9ee:	f0 e0       	ldi	r31, 0x00	; 0
 9f0:	ee 0f       	add	r30, r30
 9f2:	ff 1f       	adc	r31, r31
 9f4:	ec 0d       	add	r30, r12
 9f6:	fd 1d       	adc	r31, r13
 9f8:	84 89       	ldd	r24, Z+20	; 0x14
 9fa:	95 89       	ldd	r25, Z+21	; 0x15
 9fc:	86 1b       	sub	r24, r22
 9fe:	97 0b       	sbc	r25, r23
 a00:	07 96       	adiw	r24, 0x07	; 7
 a02:	0f 97       	sbiw	r24, 0x0f	; 15
 a04:	88 f0       	brcs	.+34     	; 0xa28 <main+0x21a>
				    || adcOld[channel] - value < -7) {
					// DEBUG LED
					//PORTC ^= 0xff;
					
					adcOld[channel] = value;
 a06:	75 8b       	std	Z+21, r23	; 0x15
 a08:	64 8b       	std	Z+20, r22	; 0x14
					// MIDI CC msg
					midiMsg[0] = 0x0b;
 a0a:	4d a2       	std	Y+37, r4	; 0x25
					midiMsg[1] = 0xb0;
 a0c:	3e a2       	std	Y+38, r3	; 0x26
					midiMsg[2] = channel + 70;	// cc 70..77 
 a0e:	0a 5b       	subi	r16, 0xBA	; 186
 a10:	0f a3       	std	Y+39, r16	; 0x27
					midiMsg[3] = value >> 3;
 a12:	93 e0       	ldi	r25, 0x03	; 3
 a14:	35 95       	asr	r19
 a16:	27 95       	ror	r18
 a18:	9a 95       	dec	r25
 a1a:	e1 f7       	brne	.-8      	; 0xa14 <main+0x206>
 a1c:	28 a7       	std	Y+40, r18	; 0x28
					sendEmptyFrame = 0;
 a1e:	10 92 75 00 	sts	0x0075, r1
					usbSetInterrupt(midiMsg, 4);
 a22:	c7 01       	movw	r24, r14
 a24:	64 e0       	ldi	r22, 0x04	; 4
 a26:	e1 dc       	rcall	.-1598   	; 0x3ea <usbSetInterrupt>
						//	wdt_reset();
						
		
				}
				adcindex++;
 a28:	93 94       	inc	r9
				//channel &= 0x07;
				//if (channel>5)					
				//	channel = 2;
				
				}
				usbPoll();
 a2a:	05 dd       	rcall	.-1526   	; 0x436 <usbPoll>
		usbPoll();
		int k,l;
		scanKeys(keys,10);


		for(j=0;j<10;j++){
 a2c:	80 91 73 00 	lds	r24, 0x0073
 a30:	90 91 74 00 	lds	r25, 0x0074
 a34:	01 96       	adiw	r24, 0x01	; 1
 a36:	90 93 74 00 	sts	0x0074, r25
 a3a:	80 93 73 00 	sts	0x0073, r24
 a3e:	20 91 73 00 	lds	r18, 0x0073
 a42:	30 91 74 00 	lds	r19, 0x0074
 a46:	2a 30       	cpi	r18, 0x0A	; 10
 a48:	31 05       	cpc	r19, r1
 a4a:	34 f4       	brge	.+12     	; 0xa58 <main+0x24a>
			keyPressed=1;
			keyReleased=1;
			for(k=0;k<10;k++){//can be reduced
				if(lastKeys[j]==keys[k]){
 a4c:	f5 01       	movw	r30, r10
 a4e:	e2 0f       	add	r30, r18
 a50:	f3 1f       	adc	r31, r19
 a52:	e0 81       	ld	r30, Z
 a54:	d6 01       	movw	r26, r12
 a56:	4e cf       	rjmp	.-356    	; 0x8f4 <main+0xe6>
 a58:	d6 01       	movw	r26, r12
 a5a:	f5 01       	movw	r30, r10
 a5c:	20 e0       	ldi	r18, 0x00	; 0
 a5e:	30 e0       	ldi	r19, 0x00	; 0
 a60:	04 c0       	rjmp	.+8      	; 0xa6a <main+0x25c>
				usbPoll();
			}

		}
		//if(j>9){
		for(j=0;j<10;j++)			lastKeys[j]=keys[j];
 a62:	8d 91       	ld	r24, X+
 a64:	81 93       	st	Z+, r24
 a66:	2f 5f       	subi	r18, 0xFF	; 255
 a68:	3f 4f       	sbci	r19, 0xFF	; 255
 a6a:	2a 30       	cpi	r18, 0x0A	; 10
 a6c:	31 05       	cpc	r19, r1
 a6e:	cc f3       	brlt	.-14     	; 0xa62 <main+0x254>
 a70:	30 93 74 00 	sts	0x0074, r19
 a74:	20 93 73 00 	sts	0x0073, r18
		//j=0;}
							PORTC ^= 0xff;
 a78:	85 b3       	in	r24, 0x15	; 21
 a7a:	80 95       	com	r24
 a7c:	85 bb       	out	0x15, r24	; 21
 a7e:	30 cf       	rjmp	.-416    	; 0x8e0 <main+0xd2>

00000a80 <__divmodqi4>:
 a80:	87 fb       	bst	r24, 7
 a82:	08 2e       	mov	r0, r24
 a84:	06 26       	eor	r0, r22
 a86:	87 fd       	sbrc	r24, 7
 a88:	81 95       	neg	r24
 a8a:	67 fd       	sbrc	r22, 7
 a8c:	61 95       	neg	r22
 a8e:	18 d0       	rcall	.+48     	; 0xac0 <__udivmodqi4>
 a90:	0e f4       	brtc	.+2      	; 0xa94 <__divmodqi4_1>
 a92:	91 95       	neg	r25

00000a94 <__divmodqi4_1>:
 a94:	07 fc       	sbrc	r0, 7
 a96:	81 95       	neg	r24

00000a98 <__divmodqi4_exit>:
 a98:	08 95       	ret

00000a9a <__divmodhi4>:
 a9a:	97 fb       	bst	r25, 7
 a9c:	09 2e       	mov	r0, r25
 a9e:	07 26       	eor	r0, r23
 aa0:	0a d0       	rcall	.+20     	; 0xab6 <__divmodhi4_neg1>
 aa2:	77 fd       	sbrc	r23, 7
 aa4:	04 d0       	rcall	.+8      	; 0xaae <__divmodhi4_neg2>
 aa6:	18 d0       	rcall	.+48     	; 0xad8 <__udivmodhi4>
 aa8:	06 d0       	rcall	.+12     	; 0xab6 <__divmodhi4_neg1>
 aaa:	00 20       	and	r0, r0
 aac:	1a f4       	brpl	.+6      	; 0xab4 <__divmodhi4_exit>

00000aae <__divmodhi4_neg2>:
 aae:	70 95       	com	r23
 ab0:	61 95       	neg	r22
 ab2:	7f 4f       	sbci	r23, 0xFF	; 255

00000ab4 <__divmodhi4_exit>:
 ab4:	08 95       	ret

00000ab6 <__divmodhi4_neg1>:
 ab6:	f6 f7       	brtc	.-4      	; 0xab4 <__divmodhi4_exit>
 ab8:	90 95       	com	r25
 aba:	81 95       	neg	r24
 abc:	9f 4f       	sbci	r25, 0xFF	; 255
 abe:	08 95       	ret

00000ac0 <__udivmodqi4>:
 ac0:	99 1b       	sub	r25, r25
 ac2:	79 e0       	ldi	r23, 0x09	; 9
 ac4:	04 c0       	rjmp	.+8      	; 0xace <__udivmodqi4_ep>

00000ac6 <__udivmodqi4_loop>:
 ac6:	99 1f       	adc	r25, r25
 ac8:	96 17       	cp	r25, r22
 aca:	08 f0       	brcs	.+2      	; 0xace <__udivmodqi4_ep>
 acc:	96 1b       	sub	r25, r22

00000ace <__udivmodqi4_ep>:
 ace:	88 1f       	adc	r24, r24
 ad0:	7a 95       	dec	r23
 ad2:	c9 f7       	brne	.-14     	; 0xac6 <__udivmodqi4_loop>
 ad4:	80 95       	com	r24
 ad6:	08 95       	ret

00000ad8 <__udivmodhi4>:
 ad8:	aa 1b       	sub	r26, r26
 ada:	bb 1b       	sub	r27, r27
 adc:	51 e1       	ldi	r21, 0x11	; 17
 ade:	07 c0       	rjmp	.+14     	; 0xaee <__udivmodhi4_ep>

00000ae0 <__udivmodhi4_loop>:
 ae0:	aa 1f       	adc	r26, r26
 ae2:	bb 1f       	adc	r27, r27
 ae4:	a6 17       	cp	r26, r22
 ae6:	b7 07       	cpc	r27, r23
 ae8:	10 f0       	brcs	.+4      	; 0xaee <__udivmodhi4_ep>
 aea:	a6 1b       	sub	r26, r22
 aec:	b7 0b       	sbc	r27, r23

00000aee <__udivmodhi4_ep>:
 aee:	88 1f       	adc	r24, r24
 af0:	99 1f       	adc	r25, r25
 af2:	5a 95       	dec	r21
 af4:	a9 f7       	brne	.-22     	; 0xae0 <__udivmodhi4_loop>
 af6:	80 95       	com	r24
 af8:	90 95       	com	r25
 afa:	bc 01       	movw	r22, r24
 afc:	cd 01       	movw	r24, r26
 afe:	08 95       	ret

00000b00 <memset>:
 b00:	dc 01       	movw	r26, r24
 b02:	01 c0       	rjmp	.+2      	; 0xb06 <memset+0x6>
 b04:	6d 93       	st	X+, r22
 b06:	41 50       	subi	r20, 0x01	; 1
 b08:	50 40       	sbci	r21, 0x00	; 0
 b0a:	e0 f7       	brcc	.-8      	; 0xb04 <memset+0x4>
 b0c:	08 95       	ret

00000b0e <_exit>:
 b0e:	f8 94       	cli

00000b10 <__stop_program>:
 b10:	ff cf       	rjmp	.-2      	; 0xb10 <__stop_program>
